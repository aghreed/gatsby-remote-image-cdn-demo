diff --git a/node_modules/gatsby-plugin-remote-images/gatsby-node.js b/node_modules/gatsby-plugin-remote-images/gatsby-node.js
index 27af4e1..83f2aae 100644
--- a/node_modules/gatsby-plugin-remote-images/gatsby-node.js
+++ b/node_modules/gatsby-plugin-remote-images/gatsby-node.js
@@ -13,16 +13,25 @@ exports.pluginOptionsSchema = ({
   Joi
 }) => {
   return Joi.object({
-    mode: Joi.string().valid('cdn', 'local').default('local')
+    nodeType: Joi.string().required(),
+    imagePath: Joi.string().required(),
+    name: Joi.string(),
+    auth: Joi.object(),
+    ext: Joi.string(),
+    prepareUrl: Joi.function(),
+    type: Joi.object(),
+    silent: Joi.boolean(),
+    mode: Joi.string()
   });
 };
+const isImageCdnEnabled = () => {
+  return process.env.GATSBY_CLOUD_IMAGE_CDN === '1' || process.env.GATSBY_CLOUD_IMAGE_CDN === 'true';
+};
 exports.createSchemaCustomization = ({
   actions,
   schema
-}, {
-  mode
-}) => {
-  if (mode === 'cdn') {
+}, { mode }) => {
+  if (isImageCdnEnabled() || mode === "cdn") {
     const RemoteImageFileType = addRemoteFilePolyfillInterface(schema.buildObjectType({
       name: 'RemoteImageFile',
       fields: {
@@ -178,8 +187,8 @@ async function createImageNode(url, node, options, reporter, silent) {
     url = prepareUrl(url);
   }
   try {
-    if (mode === 'cdn') {
-      fieldNodeId = options.createNodeId(`RemoteImageFile >>> ${node.id}`);
+    if (isImageCdnEnabled() || mode === 'cdn') {
+      fileNodeId = options.createNodeId(`RemoteImageFile >>> ${node.id}`);
       const metadata = await probe(url);
       await options.createNode({
         id: fileNodeId,
@@ -227,7 +236,7 @@ async function createImageNode(url, node, options, reporter, silent) {
   }
 
   // Store the mapping between the current node and the newly created File node
-  if (fileNode) {
+  if (fileNode || isImageCdnEnabled() || mode === 'cdn') {
     // This associates the existing node (of user-specified type) with the new
     // File nodes created via createRemoteFileNode. The new File nodes will be
     // resolved dynamically through the Gatsby schema customization
@@ -240,7 +249,7 @@ async function createImageNode(url, node, options, reporter, silent) {
     const existingFileNodeMap = await options.cache.get(cacheKey);
     await options.cache.set(cacheKey, {
       ...existingFileNodeMap,
-      [name]: fileNode.id
+      [name]: fileNode ? fileNode.id : fileNodeId
     });
   }
 }
@@ -273,6 +282,7 @@ exports.createResolvers = ({
   const {
     nodeType,
     imagePath,
+    mode,
     name = 'localImage',
     type = 'object'
   } = options;
@@ -280,7 +290,7 @@ exports.createResolvers = ({
     const resolvers = {
       [nodeType]: {
         [name]: {
-          type: options.mode === 'cdn' ? '[RemoteImageFile]' : '[File]',
+          type: isImageCdnEnabled() || mode === 'cdn' ? '[RemoteImageFile]' : '[File]',
           resolve: async (source, _, context) => {
             const fileNodeMap = await cache.get(getCacheKeyForNodeId(source.id));
             if (!fileNodeMap || !fileNodeMap[name]) {
@@ -298,7 +308,7 @@ exports.createResolvers = ({
     const resolvers = {
       [nodeType]: {
         [name]: {
-          type: options.mode === 'cdn' ? 'RemoteImageFile' : 'File',
+          type: isImageCdnEnabled() || mode === 'cdn' ? 'RemoteImageFile' : 'File',
           resolve: async (source, _, context) => {
             const fileNodeMap = await cache.get(getCacheKeyForNodeId(source.id));
             if (!fileNodeMap) return null;
