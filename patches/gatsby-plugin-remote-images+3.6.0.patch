diff --git a/node_modules/gatsby-plugin-remote-images/gatsby-node.js b/node_modules/gatsby-plugin-remote-images/gatsby-node.js
index 2cb8592..8bd0743 100644
--- a/node_modules/gatsby-plugin-remote-images/gatsby-node.js
+++ b/node_modules/gatsby-plugin-remote-images/gatsby-node.js
@@ -20,7 +20,8 @@ exports.pluginOptionsSchema = ({
     ext: Joi.string(),
     prepareUrl: Joi.function(),
     type: Joi.object(),
-    silent: Joi.boolean()
+    silent: Joi.boolean(),
+    mode: Joi.string()
   });
 };
 const isImageCdnEnabled = () => {
@@ -29,8 +30,8 @@ const isImageCdnEnabled = () => {
 exports.createSchemaCustomization = ({
   actions,
   schema
-}) => {
-  if (isImageCdnEnabled()) {
+}, { mode }) => {
+  if (isImageCdnEnabled() || mode === 'cdn') {
     const RemoteImageFileType = addRemoteFilePolyfillInterface(schema.buildObjectType({
       name: 'RemoteImageFile',
       fields: {
@@ -173,6 +174,7 @@ async function createImageNodes(urls, node, options, reporter, silent) {
 async function createImageNode(url, node, options, reporter, silent) {
   const {
     name,
+    mode,
     imagePathSegments,
     prepareUrl,
     ...restOfOptions
@@ -183,7 +185,7 @@ async function createImageNode(url, node, options, reporter, silent) {
     url = prepareUrl(url);
   }
   try {
-    if (isImageCdnEnabled()) {
+    if (isImageCdnEnabled() || mode === 'cdn') {
       fileNodeId = options.createNodeId(`RemoteImageFile >>> ${node.id}`);
       const metadata = await probe(url);
       await options.createNode({
@@ -232,7 +234,7 @@ async function createImageNode(url, node, options, reporter, silent) {
   }
 
   // Store the mapping between the current node and the newly created File node
-  if (fileNode || isImageCdnEnabled()) {
+  if (fileNode || isImageCdnEnabled() || mode === 'cdn') {
     // This associates the existing node (of user-specified type) with the new
     // File nodes created via createRemoteFileNode. The new File nodes will be
     // resolved dynamically through the Gatsby schema customization
@@ -276,6 +278,7 @@ exports.createResolvers = ({
   createResolvers
 }, options) => {
   const {
+    mode,
     nodeType,
     imagePath,
     name = 'localImage',
@@ -285,7 +288,7 @@ exports.createResolvers = ({
     const resolvers = {
       [nodeType]: {
         [name]: {
-          type: isImageCdnEnabled() ? '[RemoteImageFile]' : '[File]',
+          type: isImageCdnEnabled() || mode === 'cdn' ? '[RemoteImageFile]' : '[File]',
           resolve: async (source, _, context) => {
             const fileNodeMap = await cache.get(getCacheKeyForNodeId(source.id));
             if (!fileNodeMap || !fileNodeMap[name]) {
@@ -303,7 +306,7 @@ exports.createResolvers = ({
     const resolvers = {
       [nodeType]: {
         [name]: {
-          type: isImageCdnEnabled() ? 'RemoteImageFile' : 'File',
+          type: isImageCdnEnabled() || mode === 'cdn' ? 'RemoteImageFile' : 'File',
           resolve: async (source, _, context) => {
             const fileNodeMap = await cache.get(getCacheKeyForNodeId(source.id));
             if (!fileNodeMap) return null;
